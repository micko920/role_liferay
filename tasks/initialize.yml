---
- name: Add the liferay group
  group:
    name: "{{ liferay_group }}"
    state: present

- name: Add the liferay user
  user:
    name: "{{ liferay_user }}"
    password_lock: true
    shell: /bin/bash
    append: true

- name: Check to see if already installed
  stat:
    path: "{{ liferay_dest }}"
  register: stat_liferay_dest

- name: Set new install flag
  set_fact:
    new_liferay_dest: true
  when:
    - stat_liferay_dest.stat.exists is defined
    - not stat_liferay_dest.stat.exists

- name: Ensure dest exists
  file:
    path: "{{ liferay_dest }}"
    owner: "{{ liferay_user }}"
    group: "{{ liferay_group }}"
    state: directory
    mode: 0700
    recurse: true
  when: new_liferay_dest is defined

- name: Ensure data directory exists
  file:
    path: "{{ liferay_document_library_root }}"
    owner: "{{ liferay_user }}"
    group: "{{ liferay_group }}"
    state: directory
    mode: 0700
    recurse: true
  when: new_liferay_dest is defined

- name: Get the Liferay Bundle
  unarchive:
    src: "{{ liferay_url }}"
    remote_src: true
    dest: "{{ liferay_dest }}"
    owner: "{{ liferay_user }}"
    group: "{{ liferay_group }}"
    mode: 0755
  register: install_liferay
  until: install_liferay is succeeded
  retries: 3
  when: new_liferay_dest is defined

- name: configure liferay instance - portal-ext.properties
  template:
    src: portal-ext.properties.j2
    dest: "{{ liferay_home }}/portal-ext.properties"

- name: configure liferay portal config
  template:
    src: "{{ item }}.j2"
    dest: "{{ liferay_home }}/osgi/configs/{{ item }}"
  with_items:
    - com.liferay.portal.store.file.system.configuration.AdvancedFileSystemStoreConfiguration.cfg

- name: configure liferay portal config
  template:
    src: "{{ item }}.j2"
    dest: "{{ liferay_home }}/osgi/configs/{{ item }}"
  with_items:
    - com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config
    - com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config
  when: liferay_version is defined liferay_version == '7.3'

# This does not for with git-lfs
# - name: Copy plugins for deployment
#   copy:
#     src: "{{ item }}"
#     dest: "{{ liferay_deploy }}/{{ item }}"
#     owner: "{{ liferay_user }}"
#     group: "{{ liferay_group }}"
#   with_items:
#     - Liferay CE Connector to Elasticsearch 7.lpkg

# Hack to make the role get the git-lfs file not the placeholder
- name: Copy plugins for deployment
  get_url:
    url: "https://github.com/micko920/role_liferay/raw/master/files/{{ item | urlencode }}"
    dest: "{{ liferay_deploy }}/{{ item }}"
    owner: "{{ liferay_user }}"
    group: "{{ liferay_group }}"
  with_items:
    - Liferay CE Connector to Elasticsearch 7.lpkg
  when: liferay_version is defined liferay_version == '7.3'

#- name: Check the content
#   slurp:
#     src: "{{ liferay_home }}/osgi/configs/com.liferay.portal.search.elasticsearch6.configuration.ElasticsearchConfiguration.config"
#   register: new_config_file_content

# - name: Decode data and store as fact
#   set_fact:
#     config_data: "{{ new_config_file_content.content | b64decode }}"

# Run life service
# ${LIFERAY_HOME}/tomcat/bin/catalina.sh run
- name: create liferay service instance
  import_role:
    name: micko920.role_createservice
  vars:
    service_list:
      - name: "{{ liferay_service_name }}"
        description: "{{ liferay_service_description }}"
        start_command: "{{ liferay_tomcat_home }}/bin/startup.sh"
        stop_command: "{{ liferay_tomcat_home }}/bin/shutdown.sh"
        user_name: "{{ liferay_user }}"
        group_name: "{{ liferay_group }}"
        type: "forking"
        after: "syslog.target network.target"

- name: Ensure Liferay is final state and enabled on boot.
  systemd:
    name: "{{ liferay_service_name }}"
    state: "{{ liferay_final_state }}"
    enabled: "{{ liferay_service_enabled }}"
  when: systemd_pid_1 is defined and systemd_pid_1
